CREATE DATABASE IF NOT EXISTS fast_food_ordering;

USE fast_food_ordering;

DROP TABLE IF EXISTS USERS;
CREATE TABLE USERS (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    full_name VARCHAR(255) NOT NULL,
    phone_number VARCHAR(255) NOT NULL,
    avatar VARCHAR(255) NOT NULL,
    is_active BOOLEAN DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Bảng lưu trữ thông tin về quản trị viên
DROP TABLE IF EXISTS ADMINS;
CREATE TABLE ADMINS (
    admin_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT UNIQUE,
    FOREIGN KEY (user_id) REFERENCES USERS(user_id)
);
-- Bảng lưu trữ thông tin về người dùng đối tác
DROP TABLE IF EXISTS PARTNERS;
CREATE TABLE PARTNERS (
    partner_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT UNIQUE,
    FOREIGN KEY (user_id) REFERENCES USERS(user_id)
);
-- Bảng lưu trữ thông tin về người dùng khách hàng
DROP TABLE IF EXISTS CUSTOMERS;
CREATE TABLE CUSTOMERS (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT UNIQUE,
    FOREIGN KEY (user_id) REFERENCES USERS(user_id)
);

-- Bảng lưu trữ thông tin về địa chỉ
DROP TABLE IF EXISTS ADDRESSES;
CREATE TABLE ADDRESSES (
    address_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    address VARCHAR(255) NOT NULL,
    province VARCHAR(255) NOT NULL,
    district VARCHAR(255) NOT NULL,
    ward VARCHAR(255) NOT NULL,
    is_default BOOLEAN DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES USERS(user_id)
);

CREATE TABLE CUSTOMER_ADDRESSES (
    address_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT NOT NULL,
    address VARCHAR(255) NOT NULL,
    province VARCHAR(255) NOT NULL,
    district VARCHAR(255) NOT NULL,
    ward VARCHAR(255) NOT NULL,
    is_default BOOLEAN DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES USERS(customer_id)
);

DROP TABLE IF EXISTS SHIPPERS;
CREATE TABLE SHIPPERS (
    shipper_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT UNIQUE,
    ship_status ENUM ('available', 'busy', 'offline') DEFAULT 'available',
    FOREIGN KEY (user_id) REFERENCES USERS(user_id)
);

DROP TABLE IF EXISTS STAFFS;
CREATE TABLE STAFFS (
    staff_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT UNIQUE,
    staff_status ENUM ('available', 'busy', 'offline') DEFAULT 'available',
    position ENUM ('manager', 'waiter', 'chef', 'cleaner', 'security') DEFAULT 'waiter',
    salary DECIMAL(10,3) NOT NULL,
    salary_type ENUM('hourly', 'daily', 'monthly') NOT NULL,
    start_date DATE,
    end_date DATE,
    start_time TIME,
    end_time TIME,
    month INT,
    year INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES USERS(user_id)
);

DROP TABLE IF EXISTS ATTENDANCES;
CREATE TABLE ATTENDANCES (
    attendance_id INT PRIMARY KEY AUTO_INCREMENT,
    staff_id INT NOT NULL,
    date DATE NOT NULL,
    check_in TIME NOT NULL,
    check_out TIME NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (staff_id) REFERENCES STAFFS(staff_id)
);

-- Tạo bảng lưu trữ thông tin về loại cửa hang: quán ăn, nhậu-lẩu-nướng, quán cà phê, quán trà sữa, quán bánh, quán nước
DROP TABLE IF EXISTS SHOPCATEGORIES;
CREATE TABLE SHOPCATEGORIES (
    category_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
DROP TABLE IF EXISTS SHOPS;
CREATE TABLE SHOPS (
    shop_id INT PRIMARY KEY AUTO_INCREMENT,
    shop_image VARCHAR(255) NOT NULL,
    shop_name VARCHAR(255) NOT NULL,
    description TEXT,
    shop_category_id INT NOT NULL,
    open_time TIME NOT NULL,
    close_time TIME NOT NULL,
    shop_address VARCHAR(255) NOT NULL,
    hotline VARCHAR(255) NOT NULL,
    partner_id INT NOT NULL,
    is_active BOOLEAN DEFAULT 0,
    rating INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (partner_id) REFERENCES PARTNERS(partner_id)
    FOREIGN KEY (shop_category_id) REFERENCES SHOPCATEGORIES(category_id)
);

DROP TABLE IF EXISTS REFRESH_TOKENS;
CREATE TABLE REFRESH_TOKENS (
    token_id INT PRIMARY KEY AUTO_INCREMENT,
    token VARCHAR(255) NOT NULL COMMENT 'Refresh token value',
    user_id INT NOT NULL COMMENT 'ID của người dùng liên kết với token',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'Thời điểm tạo token',
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Thời điểm cập nhật token',
    FOREIGN KEY (user_id) REFERENCES USERS(user_id)
);

DROP TABLE IF EXISTS CARDS;
CREATE TABLE CARDS (
    card_id INT PRIMARY KEY AUTO_INCREMENT,
    card_number VARCHAR(255) NOT NULL,
    user_id INT NOT NULL,
    card_holder_name VARCHAR(255) NOT NULL,
    expired_date DATE NOT NULL,
    cvv VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES USERS(user_id)
);
DROP TABLE IF EXISTS MENU;
CREATE TABLE MENU (
    menu_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    partner_id INT NOT NULL,
    is_draft BOOLEAN DEFAULT 0,
    is_active BOOLEAN DEFAULT 0,
    shop_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX (partner_id),
    INDEX (shop_id),
    FOREIGN KEY (partner_id) REFERENCES PARTNERS(partner_id),
    FOREIGN KEY (shop_id) REFERENCES SHOPS(shop_id)
);

DROP TABLE IF EXISTS MENUSECTIONS;
CREATE TABLE MENUSECTIONS (
    menu_section_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    menu_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX (menu_id),
    FOREIGN KEY (menu_id) REFERENCES MENU(menu_id)
);
-- Bảng lưu trữ các món ăn
DROP TABLE IF EXISTS FOOD;
CREATE TABLE FOOD (
    food_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    sold INT DEFAULT 0,
    favorites INT DEFAULT 0,
    price_before_discount DECIMAL(10,3) NOT NULL,
    price DECIMAL(10,3) NOT NULL,
    menu_section_id INT NOT NULL,
    shop_id INT NOT NULL,
    quantity INT DEFAULT 0,
    image JSON NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (menu_section_id) REFERENCES MENUSECTIONS(menu_section_id),
    FOREIGN KEY (shop_id) REFERENCES SHOPS(shop_id)
);

DROP TABLE IF EXISTS FOODOPTIONS;
CREATE TABLE FOODOPTIONS (
    option_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10,3) NOT NULL,
    quantity INT DEFAULT 0,
    food_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (food_id) REFERENCES FOOD(food_id)
);

DROP TABLE IF EXISTS FOODINVENTORIES;
CREATE TABLE FOODINVENTORIES (
    inventory_id INT PRIMARY KEY AUTO_INCREMENT,
    food_id INT NOT NULL,
    quantity INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (food_id) REFERENCES FOOD(food_id)
);


DROP TABLE IF EXISTS CATEGORIES;
CREATE TABLE CATEGORIES (
    category_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL COMMENT 'Tên của danh mục',
    description TEXT COMMENT 'Mô tả của danh mục',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'Thời điểm tạo danh mục',
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Thời điểm cập nhật danh mục'
);

DROP TABLE IF EXISTS FOODCATEGORIES;
CREATE TABLE FOODCATEGORIES (
    id INT PRIMARY KEY AUTO_INCREMENT,
    food_id INT NOT NULL,
    category_id INT NOT NULL,
    FOREIGN KEY (food_id) REFERENCES FOOD(food_id),
    FOREIGN KEY (category_id) REFERENCES CATEGORIES(category_id)
);

-- Tao bang carts de luu tru thong tin gio hang cua khach hang 1-1 voi customer
DROP TABLE IF EXISTS CARTS;
CREATE TABLE CARTS (
  cart_id INT PRIMARY KEY AUTO_INCREMENT,
  customer_id INT NOT NULL,
  total_price DECIMAL(10,3) NOT NULL DEFAULT 0.00,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (customer_id) REFERENCES CUSTOMERS(customer_id)
);
-- cart items de luu tru thong tin cac mon an trong gio hang
DROP TABLE IF EXISTS CARTITEMS;
CREATE TABLE CARTITEMS (
  cart_item_id INT PRIMARY KEY AUTO_INCREMENT,
  cart_id INT NOT NULL,
  shop_id INT NOT NULL,
  food_id INT NOT NULL,
  quantity INT NOT NULL,
  price DECIMAL(10,3) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (cart_id) REFERENCES CARTS(cart_id),
  FOREIGN KEY (food_id) REFERENCES FOOD(food_id)
  FOREIGN KEY (shop_id) REFERENCES SHOPS(shop_id)
);

CREATE TABLE ORDERS (
  order_id INT PRIMARY KEY AUTO_INCREMENT,
  order_number VARCHAR(255) NOT NULL,
  customer_id INT NOT NULL,
  staff_id INT NOT NULL,
  shop_id INT NOT NULL,
  total_price DECIMAL(10,3) NOT NULL,
  status ENUM('PENDING', 'PROCESSING', 'DELIVERING', 'DELIVERED', 'CANCELED') DEFAULT 'PENDING',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (customer_id) REFERENCES CUSTOMERS(customer_id),
  FOREIGN KEY (shop_id) REFERENCES SHOPS(shop_id),
  FOREIGN KEY (staff_id) REFERENCES STAFFS(staff_id)
);

CREATE TABLE ORDERDETAILS (
  order_detail_id INT PRIMARY KEY AUTO_INCREMENT,
  order_id INT NOT NULL,
  food_id INT NOT NULL,
  quantity INT NOT NULL,
  price DECIMAL(10,3) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (order_id) REFERENCES ORDERS(order_id),
  FOREIGN KEY (food_id) REFERENCES FOOD(food_id)
);

CREATE TABLE PAYMENTS (
  payment_id INT PRIMARY KEY AUTO_INCREMENT,
  order_id INT NOT NULL,
  payment_method VARCHAR(255) NOT NULL,
  card_id INT NOT NULL,
  total_price DECIMAL(10,3) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (order_id) REFERENCES ORDERS(order_id),
  FOREIGN KEY (card_id) REFERENCES CARDS(card_id)
);
CREATE TABLE BILLS (
  bill_id INT PRIMARY KEY AUTO_INCREMENT,
  order_id INT NOT NULL,
  total_price DECIMAL(10,3) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (order_id) REFERENCES ORDERS(order_id)
);
-- Bảng lưu trữ thông tin vận chuyển đơn hàng
CREATE TABLE DELIVERY (
  delivery_id INT PRIMARY KEY AUTO_INCREMENT,
  shipper_id INT NOT NULL,
  order_id INT NOT NULL,
  delivery_time TIMESTAMP NOT NULL,
  status ENUM('PENDING', 'DELIVERING', 'DELIVERED', 'CANCELED') DEFAULT 'PENDING',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (shipper_id) REFERENCES SHIPPERS(shipper_id),
  FOREIGN KEY (order_id) REFERENCES ORDERS(order_id)
);

CREATE TABLE FAVORITES (
  favorite_id INT PRIMARY KEY AUTO_INCREMENT,
  customer_id INT NOT NULL,
  food_id INT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (customer_id) REFERENCES CUSTOMERS(customer_id),
  FOREIGN KEY (food_id) REFERENCES FOOD(food_id)
);
CREATE TABLE REVIEWS (
  review_id INT PRIMARY KEY AUTO_INCREMENT,
  customer_id INT NOT NULL,
  shop_id INT NOT NULL,
  rating INT NOT NULL,
  content TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (customer_id) REFERENCES CUSTOMERS(customer_id),
  FOREIGN KEY (shop_id) REFERENCES SHOPS(shop_id)
);

CREATE TABLE NOTIFICATIONS (
  notification_id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT NOT NULL,
  content TEXT,
  is_read BOOLEAN DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES USERS(user_id) ON DELETE CASCADE
);

CREATE TABLE DISCOUNTS (
  discount_id INT PRIMARY KEY AUTO_INCREMENT,
  code VARCHAR(255) NOT NULL,
  discount_type ENUM('PERCENTAGE', 'AMOUNT') NOT NULL, 
  discount_value DECIMAL(10,3) NOT NULL,
  max_discount DECIMAL(10,3) NOT NULL,
  min_order DECIMAL(10,3) NOT NULL,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE DISCOUNTUSAGES (
  discount_usage_id INT PRIMARY KEY AUTO_INCREMENT,
  customer_id INT NOT NULL,
  discount_id INT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (customer_id) REFERENCES USERS(user_id),
  FOREIGN KEY (discount_id) REFERENCES DISCOUNTS(discount_id)
);

CREATE TABLE ORDERSSTATISTICS (
  orders_statistics_id INT PRIMARY KEY AUTO_INCREMENT,
  date DATE NOT NULL,
  total_orders INT DEFAULT 0,
  statistic_type ENUM('DAILY', 'MONTHLY', 'YEARLY') NOT NULL,
  month INT,
  year INT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE REVENUESTATISTICS (
  revenue_statistics_id INT PRIMARY KEY AUTO_INCREMENT,
  date DATE,
  month INT,
  year INT,
  total_revenue DECIMAL(10,3) DEFAULT 0,
  statistic_type ENUM('DAILY', 'MONTHLY', 'YEARLY') NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
